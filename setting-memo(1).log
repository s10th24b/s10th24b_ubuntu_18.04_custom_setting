#[-1] : for Ubuntu 18.04 LTS

#[0] BASIC UPGRADE
sudo apt-get update && sudo apt-get upgrade -y 
sudo apt-get install gcc g++ openjdk-8-jdk vim terminator net-tools finger -y
sudo apt-get install vim-gnome -y
spd-say done
#[1] INSTALL ZSH and oh-my-zsh
sudo apt-get install zsh curl git -y
sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
#[2] INSTALL ZSH SYNTAX HIGHLIGHTING
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $ZSH_CUSTOM/plugins/zsh-syntax-highlighting
#[3] INSTALL ZSH AUTOSUGGESTIONS
git clone https://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions

#[m4] ADD ~./ZSHRC FILE AS BELOW 
ZSH_THEME="amuse"
plugins=(
git
zsh-syntax-highlighting
zsh-autosuggestions
)
export XDG_CONFIG_HOME="$HOME/.config"

source $ZSH/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source $ZSH/custom/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
alias install="sudo apt install"
alias remove="sudo apt remove"
alias updnupg="sudo apt update && sudo apt upgrade"
alias py="python3"




#[m5] UPDATE ~/.VIMRC FILE AS BELOW
" Basic Settings
set number "show line number
" set relativenumber "show relative number
set hlsearch "highlight search
set ignorecase "ignore case when searching
" set smartcase "consider case when searching
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set cursorline "highlight current cursor line
set history=256 "history buffer in .viminfo
set guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor,sm:block-blinkwait175-blinkoff150-blinkon175

"set nobackup
"set paste "paste mode
"
" syntax-highlighting
if has("syntax")
    syntax on
endif

" locate cursor at last-worked line.
au BufReadPost *
\ if line("'\"") > 0 && line("'\"") <= line("$") |
\ exe "norm g`\"" |
\ endif

 
" Key Settings
"nnoremap <F1> :set invpaste paste?<CR>
"nnoremap <F3> :set invpaste paste?<CR>
"nnoremap <F4> :set invpaste paste?<CR>
"nnoremap <F5> :set invpaste paste?<CR>
"nnoremap <F6> :set invpaste paste?<CR>
" Enter paste mode. Comfortable when pasting system clipboard into vim
nnoremap <silent><F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
let mapleader = ","

" move to previous tab
nnoremap <silent><Leader>q :bp<CR>

" move to next tab
nnoremap <silent><Leader>w :bn<CR>

" close current tab
nnoremap <silent><Leader>C :bd<CR>

" use primary(=copy-on-select) (star means Select)
noremap <silent><Leader>y "*y
noremap <silent><Leader>p "*p<CR>
" use clipboard  (=usually ^C and ^V) (ctrl PLUS c)
noremap <silent><Leader>Y "+y
noremap <silent><Leader>P "+p<CR>

" split line command. ignore nvim and pymode
if has('nvim')
    map K <NOP>
endif
let g:pymode_doc_bind = 0
nnoremap <silent>K i<CR><Esc>

" show NERDTree
nnoremap <silent><Leader>nt :NERDTree<CR>

" toggle Tlist & TagBar
nnoremap <Leader>tl :TlistToggle<CR>
nnoremap <Leader>tb :TagbarToggle<CR>
"nmap <F8> :TagbarToggle<CR>
let Tlist_Use_Right_Window = 1

" vim-jupyter integration
autocmd Filetype ipynb nmap <silent><Leader>b :VimpyterInsertPythonBlock<CR>
autocmd Filetype ipynb nmap <silent><Leader>j :VimpyterStartJupyter<CR>
"autocmd Filetype ipynb nmap <silent><Leader>n :VimpyterStartNteract<CR>


" YouCompleteMe preview window disabling
set completeopt-=preview


"""""""""""""""""""""""""""""""""""""""""""""""""
" Below are my custom command
set shell=/usr/bin/zsh
autocmd Filetype python nmap <silent><Leader>j :call FunctionPythonToIpynb()<CR>
function! FunctionPythonToIpynb()
    !p2j -o "%:t"
    :vi %:r.ipynb
endfunction
" Above are my custom command
"""""""""""""""""""""""""""""""""""""""""""""""""
 
" Key Setting - resize windows
nnoremap <silent> <Leader>= :exe "resize +3"<CR>
nnoremap <silent> <Leader>- :exe "resize -3"<CR>
nnoremap <silent> <Leader>] :exe "vertical resize +8"<CR>
nnoremap <silent> <Leader>[ :exe "vertical resize -8"<CR>
 
nnoremap <silent> <Leader>+ :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <silent> <Leader>_ :exe "resize " . (winheight(0) * 2/3)<CR>
nnoremap <silent> <Leader>} :exe "vertical resize " . (winheight(0) *2/3)<CR>
 
" Vundle
set nocompatible              " be iMproved, required
filetype off                  " required
 
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
"set rtp+=/home/$USER/.vim/bundle/Vundle.vim
" Since Ubuntu 19.10, the way how sudo handles $HOME got different, so stop using ~ in .vimrc
" Reference: https://askubuntu.com/questions/1186999/how-does-sudo-handle-home-differently-since-19-10?noredirect=1
" if you want to sudo command preserving old home directory, sudo --preserve-env=HOME
" use sudonvim as your custom alias of sudo --preserve-env=HOME nvim
" use sudovim as your custom alias of sudo --preserve-env=HOME vim
" What about /home/$USER/.... ?
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')
 
" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
 
" Keep Plugin commands between vundle#begin/end.
 
" vim-airline
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'Valloric/YouCompleteMe'
Plugin 'sjl/badwolf'
Plugin 'taglist-plus'

Plugin 'scrooloose/nerdtree'
Plugin 'tpope/vim-fugitive'

Plugin 'scrooloose/nerdcommenter' "<Leader>c<Space> by default
Plugin 'scrooloose/syntastic'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'itchyny/calendar.vim'
Plugin 'majutsushi/tagbar'
Plugin 'Yggdroot/indentLine'
Plugin 'chrisbra/csv.vim'
Plugin 'tpope/vim-eunuch'
Plugin 'szymonmaszke/vimpyter'
Plugin 'bkad/CamelCaseMotion'
 
" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

"Plugins will be downloaded under the specified directory.
call plug#begin('~/.vim/plugged')
"call plug#begin('/home/$USER/.vim/plugged')

" Declare the list of plugins.
Plug 'thaerkh/vim-indentguides' 
Plug 'michaeljsmith/vim-indent-object'
Plug 'python-mode/python-mode', { 'for': 'python', 'branch': 'develop' }
Plug 'numirias/semshi', {'do': ':UpdateRemotePlugins'}
"Plug 'kassio/neoterm' "neovim terminal tab

" List ends here. Plugins become visible to Vim after this call.
call plug#end()

 " for vim-airline
 let g:airline#extensions#tabline#enabled = 1 " turn on buffer list
 let g:airline_theme='badwolf'
 let g:airline_powerline_fonts = 1
 set laststatus=2 " turn on bottom bar
 set t_Co=256

 " for YouCompleteMe
" C-j & C-k is used in nvim defauly key mapping. we should disable it.
if has('nvim')
    map <C-j> <NOP>
    map <C-k> <NOP>
endif
let g:ycm_key_list_select_completion = ['<TAB>', '<Down>', '<C-j>']
let g:ycm_key_list_previous_completion = ['<S-TAB>', '<Up>', '<C-k>']

" for Plugin vim theme
" " Make the gutters darker than the background.
let g:badwolf_darkgutter = 1
" Make the tab line darker than the background.
let g:badwolf_tabline = 0

" Make the tab line the same color as the background.
"let g:badwolf_tabline = 1

"" Make the tab line lighter than the background.
"let g:badwolf_tabline = 2

"" Make the tab line much lighter than the background.
"let g:badwolf_tabline = 3
set termguicolors
set background=dark
"set background=light
colorscheme badwolf

" Help us dealing with annoying swap file
" reference: https://www.vim.org/scripts/script.php?script_id=4923
set title titlestring=
let g:autoswap_detect_tmux = 1


" for NVIM
"""""""""""""NVIM""""""""""""""""
set mouse=c " disable mouse

" For Terminal buffer
"set nocompatible
"filetype off
"let &runtimepath.=',~/.vim/bundle/neoterm'
"filetype plugin on
nnoremap <leader>tt :bel sp \| resize 10 \| terminal<CR>
" <leader>b = breakpoint with pdb

" ignore sub tabs when navigating buffer with :bp,:bn (Terminal tab, pymode_lint qf)
if has('nvim')
    autocmd TermOpen * if bufwinnr('') > 0 | setlocal nobuflisted | endif
    "autocmd TermOpen * setlocal nobuflisted
    "reference: https://stackoverflow.com/questions/28613190/exclude-quickfix-buffer-from-bnext-bprevious
    augroup qf
        autocmd!
        autocmd FileType qf set nobuflisted
    augroup END
else 
    if exists('##TerminalOpen')
        autocmd TerminalOpen * if bufwinnr('') > 0 | setlocal nobuflisted | endif
        "autocmd TerminalOpen * setlocal nobuflisted
        augroup qf
            autocmd!
            autocmd FileType qf set nobuflisted
        augroup END
    endif
endif

if has('nvim')
    :tnoremap <A-h> <C-\><C-n><C-w>h
    :tnoremap <A-j> <C-\><C-n><C-w>j
    :tnoremap <A-k> <C-\><C-n><C-w>k
    :tnoremap <A-l> <C-\><C-n><C-w>l
endif
nnoremap <A-h> <C-w>h
nnoremap <A-j> <C-w>j
nnoremap <A-k> <C-w>k
nnoremap <A-l> <C-w>l

" For CamelCaseMotion
"let g:camelcasemotion_key = '<leader>'
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
map <silent> ge <Plug>CamelCaseMotion_ge
sunmap w
sunmap b
sunmap e
sunmap ge
omap <silent> iw <Plug>CamelCaseMotion_iw
xmap <silent> iw <Plug>CamelCaseMotion_iw
omap <silent> ib <Plug>CamelCaseMotion_ib
xmap <silent> ib <Plug>CamelCaseMotion_ib
omap <silent> ie <Plug>CamelCaseMotion_ie
xmap <silent> ie <Plug>CamelCaseMotion_ie
imap <silent> <S-Left> <C-o><Plug>CamelCaseMotion_b
imap <silent> <S-Right> <C-o><Plug>CamelCaseMotion_w

" For python-mode
let g:pymode_debug = 1
" ignore line warnings
"let g:syntastic_quiet_messages = { 'level': 'warnings' } " silences all msgs that are NOT errors
"let g:syntastic_quiet_messages = { 'regex': 'E501' } " silences all msgs that are NOT errors
let g:pymode_lint_ignore=['E501', 'E261', 'E231', 'E116', 'W'] " ignore warnings
"let g:pymode_lint_ignore=['E501', 'E231', 'W'] " ignore warnings
" E501 = max line length warning
" E231 = whitespace after ',' warning
" W391 = blank line at EOF warnings
nmap <leader>la :PymodeLintAuto<CR>:PymodeLint<CR>
" PymodeLintAuto autofixes PEP8 errors

function! MyCustomHighlights()
    hi semshiGlobal      ctermfg=red guifg=#ff0000
    hi semshiLocal           ctermfg=209 guifg=#ff875f
    hi semshiGlobal          ctermfg=214 guifg=#ffaf00
    hi semshiImported        ctermfg=214 guifg=#ffaf00 cterm=bold gui=bold
    hi semshiParameter       ctermfg=75  guifg=#5fafff
    hi semshiParameterUnused ctermfg=117 guifg=#87d7ff cterm=underline gui=underline
    hi semshiFree            ctermfg=218 guifg=#ffafd7
    hi semshiBuiltin         ctermfg=207 guifg=#ff5fff
    hi semshiAttribute       ctermfg=49  guifg=#00ffaf
    hi semshiSelf            ctermfg=249 guifg=#b2b2b2
    hi semshiUnresolved      ctermfg=226 guifg=#ffff00 cterm=underline gui=underline
    hi semshiSelected        ctermfg=231 guifg=#ffffff ctermbg=161 guibg=#d7005f

    hi semshiErrorSign       ctermfg=231 guifg=#ffffff ctermbg=160 guibg=#d70000
    hi semshiErrorChar       ctermfg=231 guifg=#ffffff ctermbg=160 guibg=#d70000
    sign define semshiError text=E> texthl=semshiErrorSign
endfunction
autocmd FileType python call MyCustomHighlights()
autocmd ColorScheme * call MyCustomHighlights()
"""""""""""""NVIM-END""""""""""""""""





#[m6] UPDATE PLUGINS AND INSTALL CTAGS FOR TAGLIST
git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
sudo apt-get install cmake -y
sudo apt-get install ctags -y
spd-say done

source ~/.vimrc

in vim, use command below
:PluginInstall
:PluginUpdate

#[m7] INSTALL POWERLINE FONTS AND PASTE BELOW COMMANDS
sudo apt-get install fonts-powerline -y
# clone
git clone https://github.com/powerline/fonts.git --depth=1
# # install
cd fonts
./install.sh
# clean-up a bit
cd ..
rm -rf fonts
spd-say done


#[m8] UPDATE ~/.config/terminator/config file AS BELOW  (You can Ignore this)
[global_config]
  always_split_with_profile = True
  enabled_plugins = LaunchpadCodeURLHandler, APTURLHandler, LaunchpadBugURLHandler
  geometry_hinting = True
  handle_size = 0
  inactive_color_offset = 0.656976744186
  title_font = D2Coding 11
  title_hide_sizetext = True
  title_inactive_bg_color = "#111314"
  title_inactive_fg_color = "#b7bbb7"
  title_receive_bg_color = "#5d7f90"
  title_receive_fg_color = "#b7bbb7"
  title_transmit_bg_color = "#111314"
  title_transmit_fg_color = "#b7bbb7"
  title_use_system_font = False
[keybindings]
  broadcast_all = None
  broadcast_group = None
  group_all = None
  group_all_toggle = <Super>g
  help = None
  layout_launcher = None
[layouts]
  [[default]]
    [[[child0]]]
      fullscreen = False
      last_active_term = 9336ed1b-ba39-4246-a2b1-b85e5c50a9c3
      last_active_window = True
      maximised = False
      order = 0
      parent = ""
      position = 1280:32
      size = 1280, 1018
      title = KHJ's Terminator :)
      type = Window
    [[[terminal1]]]
      order = 0
      parent = child0
      profile = default
      type = Terminal
      uuid = 9336ed1b-ba39-4246-a2b1-b85e5c50a9c3
[plugins]
[profiles]
  [[default]]
    active_encodings = ANSI_X3.4-1968, UTF-8, ISO-8859-1
    background_darkness = 0.8
    background_type = transparent
    cursor_color = "#7b7b7b"
    font = D2Coding 12
    foreground_color = "#00ff00"
    login_shell = True
    palette = "#000000:#cc0000:#4e9a06:#c4a000:#3465a4:#75507b:#06989a:#d3d7cf:#555753:#ef2929:#8ae234:#fce94f:#729fcf:#ad7fa8:#34e2e2:#eeeeec"
    scrollback_lines = 5000
    urgent_bell = True
    use_system_font = False


#[m9] install vim-plug plugin manager
curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim


#[m9-1]
sudo vim and :PlugInstall #in vim
#:IndentGuidesToggle can toggle the setting.

#[m10] tweak-tool and numix-icon
sudo apt install gnome-tweak-tool gnome-shell-extensions -y
sudo add-apt-repository ppa:numix/ppa
sudo apt install numix-icon-theme-circle -y

# install this extension via firefox or ubuntu software center from https://extensions.gnome.org/extension/19/user-themes
sudo add-apt-repository ppa:system76/pop -y
sudo add-apt-repository ppa:noobslab/icons -y
sudo apt update
sudo apt install pop-theme -y
sudo apt install system76-pop-icon-theme -y
sudo apt install pop-icon-theme -y
sudo add-apt-repository -r ppa:noobslab/icons -y
sudo add-apt-repository -r ppa:system76/pop -y
# pop-slim-dark theme: https://drive.google.com/file/d/13mdiRZD8YNExmfb0EhQOvcY3X11Lfate/view
# move the tar file to /usr/share/themes
cd ~/다운로드
tar -xvf PopSLIM-themes.tar.xz
sudo mv PopSLIM-themes/* /usr/share/themes
rm -rf PopSLIM-themes*
spd-say done

#[m11] touchpad inactivate
https://blog.naver.com/stagefright/221026768470


#[m12] install google chrome 
wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
sudo apt-get update
sudo apt-get install google-chrome-stable
sudo rm -rf /etc/apt/sources.list.d/google.list
spd-say done

#[m13] Google-Calendar
sudo add-apt-repository ppa:atareao/atareao -y
sudo apt-get update && sudo apt-get upgrade -y
sudo apt-get install calendar-indicator -y
spd-say done

#[m14] YouCompleteMe settings
sudo apt-get install build-essential python3-dev -y
cd ~/.vim/bundle/YouCompleteMe
sudo python3 install.py --clangd-completer --java-completer 
# sudo python3 install.py --all
spd-say done

#[m15] Nouveau.modeset=0 settings
sudo vi /etc/default/grub
#modify GRUB_CMDLINE_LINUX_DEFAULT="quiet splash nouveau.modeset=0"
sudo update-grub
spd-say done


#[m16] Install Workspace Matrix
#Reboot and open software center and install Workspace Matrix

#[m17] Install Jupyter
sudo apt install python3-pip -y
sudo apt install python-pip -y
pip3 install --user jupyter
pip3 install --user ipython
pip3 install --user nbconvert



#[m18] Jupyter-vim-binding extension download
#https://github.com/ipython-contrib/jupyter_contrib_nbextensions#installation
https://github.com/lambdalisue/jupyter-vim-binding
https://github.com/lambdalisue/jupyter-vim-binding/issues/92 #fix white bg issue

# Create required directory in case (optional)
mkdir -p $(jupyter --data-dir)/nbextensions
# Clone the repository
cd $(jupyter --data-dir)/nbextensions
git clone https://github.com/lambdalisue/jupyter-vim-binding vim_binding
# Activate the extension
jupyter nbextension enable vim_binding/vim_binding

#[m19] Vim - Jupyter Integration Plugin : vimpyter
https://github.com/szymonmaszke/vimpyter (you've also installed this in [m5])
pip3 install --user notedown
notedown --version

#[m20] paste below lines to tail of .zshrc file
###############################
alias kt="kotlin"
alias saydone="spd-say -t female1 'jobs done'"
alias ua="sudo ufw allow"
alias uaf="sudo ufw allow from"
alias p3install="pip3 install --user"
alias vi="nvim"
alias sudovi="sudo --preserve-env=HOME nvim"
alias sudovim="sudo --preserve-env=HOME vim"

#function py_to_ipynb()
#{ 
    #local my_file=`basename "$1"` # get full name of argument and strip the path
    #local my_extension="${my_file##*.}"
    #local my_filename="${my_file%.*}"
    #local my_ipynb="${my_filename}.ipynb_temp"
    #echo "file: ${my_file}"
    #echo "filename: ${my_filename}"
    #echo "filename_to_ipynb: ${my_ipynb}"
    #cat ${my_file} >> ${my_ipynb} #do not overwrite
    #sed -i '1 i\```{.python.input}' ${my_ipynb}
    #echo '```' >> ${my_ipynb}
    #mv ${my_ipynb} ${my_filename}.ipynb
    #vi ${my_ipynb}
#}
function ipynb_to_py()
{jupyter nbconvert --to python $1}
function repo_automake_func()
{
#Set your GitHub username and email 
#Assigning repository name
#Get directory name as repository name by default
#Modify it as you like
    repo_name=$1
    dir_name=`basename $(pwd)`
    if [ "$repo_name" = "" ]; then
      repo_name=$dir_name
    fi
# Enther github account info.
    local GITHUB_USERNAME="" 
    local GITHUB_EMAIL="" 
    git config --global user.name "${GITHUB_USERNAME}" 
    git config --global user.email "${GITHUB_EMAIL}" 
    git config --global credential.helper cache 
    git config --global credential.helper 'cache --timeout=3600' 
    echo "MAKE REPO IN GITHUB"
    curl -u "${GITHUB_USERNAME}" https://api.github.com/user/repos -d "{\"name\":\"$repo_name\"}"
    echo "[Info] Creating Local Git Repository ...."
    git init
    git add . 
# Default commit message is 'Init'
# Modify it as you like
    git commit -m "Init"
    git remote add origin https://github.com/${GITHUB_USERNAME}/$repo_name.git
    echo "[Info] Pushing local repository master branch to Github origin/master branch..."
    git push -u origin master
}
# ################################ By KHJ

#for cuda 10.0

# Nvidia Driver: https://codechacha.com/ko/install-nvidia-driver-ubuntu/
# Tensorflow GPU1: http://blog.naver.com/PostView.nhn?blogId=schmacher&logNo=221383173685&parentCategoryNo=&categoryNo=44&viewDate=&isShowPopularPosts=true&from=search
# Tensorflow GPU2: https://red-pulse.tistory.com/226
# use sudo bash cuda_10.0...... --override option for ubuntu 19.10 or unsupported configurtion case.
export PATH=/usr/local/cuda-10.0/bin${PATH:+:${PATH}}
#export LD_LIBRARY_PATH=/usr/local/cuda-10.0/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
export LD_LIBRARY_PATH=/usr/local/cuda-10.0/lib64
pip3 install --user "numpy<1.17"

################################


#[m21] install p2j 
p3install --user p2j
# p2j convert python file to ipynb jupyter notebook

#[m22] install ngrok
snap install ngrok
# ngrok enable you to connect other network without modify network preferences such as port forwarding
# https://dashboard.ngrok.com/get-started
# https://medium.com/@byteshiva/ssh-into-remote-linux-by-using-ngrok-b8c49b8dc3ca

#[m23] install NVIM #reference: https://blog2.lucent.me/vim/neovim
# https://github.com/neovim/neovim/wiki/Installing-Neovim
# usage: nvim source_code.py

sudo apt-get install software-properties-common
sudo add-apt-repository ppa:neovim-ppa/unstable
sudo apt-get update
sudo apt-get install neovim
# nvim need system clipboard connection. check :healthcheck
sudo apt-get install -y xsel
pip3 install --user pynvim

# 이건 :h nvim-from-vim 을 입력하면 확인할 수 있다.
mkdir -p ${XDG_CONFIG_HOME:=$HOME/.config}
ln -s ~/.vim $XDG_CONFIG_HOME/nvim
ln -s ~/.vimrc $XDG_CONFIG_HOME/nvim/init.vim
# 을 하면 별다른 이상 없이 Neovim에서 Vim의 설정을 대부분 그대로 이용할 수 있다. 내 경우는 Syntastic, YouCompleteMe를 비롯한 플러그인들이 모두 그대로 작동하는것을 확인할 수 있었다. 뭐 여기에 대해서 더 궁금한게 있다면 :h nvim-from-vim를 입력해서 읽어보자.
# NeoVim은 버퍼로 터미널을 쓸 수 있다. :bel sp 50 | resize 10 | terminal (*terminal은 term으로 줄여 써도 된다)을 입력하면 짠~

# There are terminal buffer in NVIM!! 
# reference: https://github.com/johngrib/simple_vim_guide
# below codes help navigating terminal buffer
# add below codes to ~/.vimrc (you'v already added these)
if has('nvim')
    :tnoremap <A-h> <C-\><C-n><C-w>h
    :tnoremap <A-j> <C-\><C-n><C-w>j
    :tnoremap <A-k> <C-\><C-n><C-w>k
    :tnoremap <A-l> <C-\><C-n><C-w>l
endif
:nnoremap <A-h> <C-w>h
:nnoremap <A-j> <C-w>j
:nnoremap <A-k> <C-w>k
:nnoremap <A-l> <C-w>l


#[m23] install python-mode #reference: https://blog2.lucent.me/vim/neovim
# add in vim-plug part below lines
Plug 'python-mode/python-mode', { 'for': 'python', 'branch': 'develop' }
#Python-mode는 파이썬을 이용할 때에 있었으면~ 싶은, 아쉬웠던 기능들을 모아둔 플러그인이다. Autocompletion, Syntax Highlighting, Refactoring, Go To Definition, Flake8 Check 등등..
#이 플러그인은 정말 NeoVim과 잘 맞는다. Vim을 쓸 때에는 pyenv와 pyenv-virtualenv 를 이용하면서 Python의 환경을 바꿀때마다 버전과 설치된 패키지가 다름에도 불구하고 제대로 반영되지 않는 경우(e.g. 컴파일시에 사용한 Python 버전으로만 동작)가 많았는데, NeoVim을 쓰면 각 환경에서 pip install neovim만 해 두면 인식된(활성화된) 환경의 Python을 이용하게 되어 굉장히 편리하다.


#[m23] install Semshi for fancy highlighting #reference: https://github.com/numirias/semshi
# Semshi provides semantic highlighting for Python in Neovim.
# You need Neovim with Python 3 support (:echo has("python3")). To install the Python provider run below code
pip3 install --user pynvim --upgrade 
# Add numirias/semshi via your plugin manager. If you're using vim-plug, add below line into ~/.config/nvim/init.vim
Plug 'numirias/semshi', {'do': ':UpdateRemotePlugins'}

#[m24] Install D2Coding font (highly efficient in coding)
mkdir -p ~/d2coding
cd ~/d2coding
git clone https://github.com/naver/d2codingfont
cd d2codingfont
unzip D2Coding-Ver1.3.2*
cd D2CodingAll
gnome-font-viewer D2Coding*.ttc
cd ~
rm -rf ~/d2coding

#[m25] open im-config for input method
# you can choose auto setting (= ibus)


#[m26] How to Change the Ubuntu Login screen
# https://askubuntu.com/questions/1135694/ubuntu-19-04-cant-change-lockscreen-background
# https://github.com/PRATAP-KUMAR/login_lock_screen_bg_change
mkdir -p ~/login_lock_screen
cd ~/login_lock_screen
git clone https://github.com/PRATAP-KUMAR/login_lock_screen_bg_change
cd login_lock_screen_bg_change
sudo bash llbg.sh --set
cd ~
rm -rf login_lock_screen

#[m27] Avahi-daemon disable
 sudo vi /etc/default/avahi-daemon
AVAHI_DAEMON_DETECT_LOCAL=0
sudo vi /usr/lib/avahi/avahi-daemon-check-dns.sh 
AVAHI_DAEMON_DETECT_LOCAL=0

#[m28] change swap files 
cd ~/.local
chown -R $USER:$USER ~/.local/share/nvim/swap

#[m29] install "Fuck" that corrects
sudo apt update
sudo apt install python3-dev python3-pip python3-setuptools -y
sudo pip3 install thefuck -y

# It is recommended that you place this command in your .bash_profile, .bashrc, .zshrc or other startup script:
eval $(thefuck --alias)
# You can use whatever you want as an alias, like for Mondays:
eval $(thefuck --alias FUCK)
# Reference: https://github.com/nvbn/thefuck


#[m30] install slack-term
# https://github.com/erroneousboat/slack-term
